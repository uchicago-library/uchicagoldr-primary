from tempfile import TemporaryDirectory
import xml.etree.ElementTree as ET
from pathlib import Path
from os.path import join
from uuid import uuid1
from .bash_cmd import BashCommand
from pypremis.nodes import *
from .convenience import iso8601_dt


class TechnicalMetadataRecordCreator(object):
    """
    This class ingests a filepath and an associated premis record instance
    and updates the premis record instance while providing access to
    a technical metadata record generated from the contents of the supplied
    filepath

    __Attribs__

    * cmd_out (tuple): The output of BashCommand.get_data()
    * record (xml.etree.ElementTree): The resulting xml record
    * premis_record (pypremis.PremisRecord): The PREMIS record instance,
    edited on the fly
    * file_path (str): The file path to generate the record for
    * timeout (int): An optional timeout to stop FITS from hanging
    """
    def __init__(self, path, premis_record, timeout=None):
        """
        Create a new TechnicalMetadataRecordCreator instance and populate it

        __Args__

        1. path (str): The path to a file to generate a record for
        2. premis_record (PremisRecord): The associated PremisRecord instance
        for the file

        __KWArgs__

        * timeout (int): a timeout to keep FITS from hanging
        """
        self.cmd_out = None
        self.record = None
        self.premis_record = premis_record
        self.file_path = Path(path)
        self.timeout = timeout
        if not self.file_path.is_file():
            raise ValueError("The technical metadata creator requires " +
                             "an existing filepath as input.")
        with TemporaryDirectory() as tmpdir:
            self.fits_path = self.make_fits_in_tmp(self.file_path, tmpdir,
                                                   timeout=self.timeout)
            self.record = self.read_fits(self.fits_path)
        self.premis_record = self.update_premis(self.premis_record)

    def make_fits_in_tmp(self, file_path, tmpdir, timeout=None):
        """
        Create a real FITS file on disk somewhere

        __Args__

        1) file_path (str): The filepath to point FITS at
        2) tmpdir (str): A tmpdir location to put the FITS file. Should be
        generated by something like TemporaryDirectory()

        __KWArgs__

        * timeout (int): how long in seconds to let FITS try to process a file

        __Returns__

        *) outpath (str): The location of a FITS file on disk
        """
        outfilename = str(uuid1())
        outpath = join(tmpdir, outfilename)
        cmd = BashCommand(['fits', '-i',
                           getattr(self.file_path,
                                   'path',
                                   str(self.file_path)),
                           '-o', outpath])
        if timeout:
            cmd.set_timeout(timeout)
        cmd.run_command()
        self.cmd_out = cmd.get_data()
        return outpath

    def read_fits(self, fits_path):
        """
        read a FITS file on disk, and spit out an xml.etree.ElementTree

        __Args__

        1) fits_path (str): the location of a FITS file on disk

        __Returns__

        * tree (ElementTree): the resulting ET instance
        """
        tree = ET.parse(fits_path)
        return tree

    def get_record(self):
        """
        returns the instances record attribute

        __Returns__

        * (ElementTree): The record
        """
        return self.record

    def get_premis(self):
        """
        returns the instances premis record attribute

        __Returns__

        * (PremisRecord): the premis record
        """
        return self.premis_record

    def update_premis(self, premis_record):
        """
        Update a premis record with an event about this FITS run

        __Returns__

        * (PremisRecord): The updated record
        """
        premis_record.add_event(self._build_event())
        return premis_record

    def _build_event(self):
        """
        build an event entry for this FITS run

        __Returns__

        * event (pypremis.nodes.Event): The event node
        """
        eventIdentifier = self._build_eventIdentifier()
        eventType = "description"
        eventDateTime = iso8601_dt()
        event = Event(eventIdentifier, eventType, eventDateTime)
        event.set_eventDetailInformation(self._build_eventDetailInformation())
        event.set_eventOutcomeInformation(self._build_eventOutcomeInformation())
        event.set_linkingAgentIdentifier(self._build_linkingAgentIdentifier())
        event.set_linkingObjectIdentifier(self._build_linkingObjectIdentifier())
        return event

    def _build_eventIdentifier(self):
        """
        build an eventIdentifier node for this FITS run

        __Returns__

        * eventIdentifier(pypremis.nodes.EventIdentifier): the event id node
        """
        eventIdentifierType = "DOI"
        eventIdentifierValue = str(uuid1())
        eventIdentifier = EventIdentifier(eventIdentifierType,
                                          eventIdentifierValue)
        return eventIdentifier

    def _build_eventDetailInformation(self):
        """
        build an eventDetailInformation node for this FITS run

        __Returns__

        * eventDetailInformation (pypremis.nodes.EventDetailInformation):
            the built eventDetailInformation node
        """
        eventDetail = "ran File Information Tool Set (FITS available at " + \
            "http://projects.iq.harvard.edu/fits/home) over file"
        eventDetailInformation = EventDetailInformation(
            eventDetail=eventDetail)
        return eventDetailInformation

    def _build_eventOutcomeInformation(self):
        """
        build an eventOutcomeInformation node for this FITS run

        __Returns__

        * eventOutcomeInformation (pypremis.nodes.EventOutcomeInformation):
            the built node
        """
        if self.cmd_out[2] is True:
            eventOutcome = "SUCCESS"
        else:
            eventOutcome = "FAIL"
        eventOutcomeDetail = self._build_eventOutcomeDetail()
        eventOutcomeInformation = EventOutcomeInformation(
            eventOutcome=eventOutcome,
            eventOutcomeDetail=eventOutcomeDetail
        )
        return eventOutcomeInformation

    def _build_eventOutcomeDetail(self):
        """
        build and eventOutcomeDetail node for this FITS run

        __Returns__

        * eventOutcomeDetail (pypremis.nodes.EventOutcomeDetail):
            the built node
        """
        eventOutcomeDetailNote = str(self.cmd_out[1])
        eventOutcomeDetail = EventOutcomeDetail(
            eventOutcomeDetailNote=eventOutcomeDetailNote
        )
        return eventOutcomeDetail

    def _build_linkingAgentIdentifier(self):
        """
        build a linkingAgentIdentifier node for this FITS run

        __Returns__

        * linkingAgentIdentifier (pypremis.nodes.LinkingAgentIdentifier):
            the built node
        """
        linkingAgentIdentifier = self.look_for_own_agent_id_in_db()
        if linkingAgentIdentifier is None:
            linkingAgentIdentifierValue = str(uuid1())
            linkingAgentIdentifierType = "DOI"
            linkingAgentIdentifier = LinkingAgentIdentifier(
                linkingAgentIdentifierType, linkingAgentIdentifierValue
            )
            linkingAgentIdentifier.set_linkingAgentRole('software describer')
        return linkingAgentIdentifier

    def _build_linkingObjectIdentifier(self):
        """
        build a linkingObjectIdentifier node for this FITS run

        __Returns__

        * linkingObjectIdentifier (pypremis.nodes.LinkingObjectIdentifier):
            the built node
        """
        linkingObjectRole = "Described object"
        # These lines are obnoxious
        linkingObjectIdentifierType = self.premis_record.get_object_list()[0].get_objectIdentifier()[0].get_objectIdentifierType()
        linkingObjectIdentifierValue = self.premis_record.get_object_list()[0].get_objectIdentifier()[0].get_objectIdentifierValue()
        linkingObjectIdentifier = LinkingObjectIdentifier(
            linkingObjectIdentifierType, linkingObjectIdentifierValue
        )
        linkingObjectIdentifier.set_linkingObjectRole(linkingObjectRole)
        return linkingObjectIdentifier

    def look_for_own_agent_id_in_db(self):
        """
        go look in the PREMIS db to see if this agent already has an id
        """
        # to be implemented in the future
        return None
